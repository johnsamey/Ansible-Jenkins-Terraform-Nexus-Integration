pipeline {
    agent none  // No global agent, specific agents for each stage

    environment {
        REPO = 'https://github.com/johnsamey/Ansible-Jenkins-Terraform-Nexus-Integration.git'
        BRANCH = 'main'
        REPO_DIR = 'Ansible-Jenkins-Terraform-Nexus-Integration'
    }

    stages {

        stage('Clone Repository') {
            agent {
                docker {
                    image 'terraform' // Terraform Docker image
                    args '-v /var/run/docker.sock:/var/run/docker.sock'
                }
            }
            steps {
                script {
                    echo 'Cloning repository...'
                    withCredentials([usernamePassword(credentialsId: 'github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASS')]) {
                        sh """
                        rm -rf ${REPO_DIR}
                        git clone https://${GIT_USER}:${GIT_PASS}@${REPO}
                        cd ${REPO_DIR}
                        git checkout ${BRANCH}
                        """
                    }
                    stash name: 'repo_content', includes: "${REPO_DIR}/**" // Stash repo content for other stages
                }
            }
        }

        stage('Terraform Init and Apply') {
            agent {
                docker {
                    image 'github' // Terraform Docker image
                    args '-v /var/run/docker.sock:/var/run/docker.sock'
                }
            }
            steps {
                script {
                    echo 'Initializing and applying Terraform...'
                    unstash 'repo_content' // Retrieve the stashed repository content
                    dir("${REPO_DIR}/terraform") {
                        try {
                            sh """
                            terraform init
                            terraform plan
                            terraform apply -auto-approve
                            """
                        } catch (err) {
                            echo 'Terraform apply failed. Attempting to destroy resources...'
                            sh 'terraform destroy -auto-approve'
                            error 'Terraform apply failed and resources have been destroyed.'
                        }
                    }
                }
            }
        }

        stage('Commit Inventory File') {
            agent {
                docker {
                    image 'terraform' // Terraform Docker image
                    args '-v /var/run/docker.sock:/var/run/docker.sock'
                }
            }
            steps {
                script {
                    echo 'Committing inventory.txt...'
                    dir("${REPO_DIR}") {
                        sh """
                        git add terraform/inventory.txt
                        git commit -m "Add inventory.txt generated by Terraform"
                        git push origin ${BRANCH}
                        """
                    }
                }
            }
        }

        stage('Ansible Configuration') {
            agent {
                docker {
                    image 'ansible' // Ansible Docker image
                    args '-v /var/run/docker.sock:/var/run/docker.sock'
                }
            }
            steps {
                script {
                    echo 'Running Ansible playbook...'
                    unstash 'repo_content' // Retrieve the stashed repository content
                    withCredentials([usernamePassword(credentialsId: 'github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASS')]) {
                        dir("${REPO_DIR}/nuxus_ansible") {
                            sh """
                            chmod 400 nexus-task.pem
                            ansible-playbook nuxus_playbook.yml -i ../terraform/inventory.txt --private-key nexus-task.pem --ssh-extra-args '-o StrictHostKeyChecking=no'
                            """
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'Pipeline completed!'
        }
        failure {
            echo 'Pipeline failed. Please check the logs.'
        }
        success {
            echo 'Pipeline succeeded. All stages completed.'
        }
        cleanup {
            echo 'Performing cleanup...'
        }
    }
}
